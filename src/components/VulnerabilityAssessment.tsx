import { useState } from "react";
import { Bug, Target, Shield, AlertCircle, CheckCircle, Clock } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";

interface Vulnerability {
  id: string;
  title: string;
  severity: "critical" | "high" | "medium" | "low";
  cvss: number;
  cve?: string;
  description: string;
  affectedAssets: string[];
  status: "open" | "in-progress" | "resolved";
  discoveredDate: string;
  category: string;
}

const VulnerabilityAssessment = () => {
  const [vulnerabilities] = useState<Vulnerability[]>([
    {
      id: "1",
      title: "SQL Injection in User Authentication",
      severity: "critical",
      cvss: 9.8,
      cve: "CVE-2024-0001",
      description: "SQL injection vulnerability in the user authentication system allows attackers to bypass login controls.",
      affectedAssets: ["Web Application", "Database Server"],
      status: "open",
      discoveredDate: "2024-01-15",
      category: "Injection"
    },
    {
      id: "2",
      title: "Cross-Site Scripting (XSS) in Comments",
      severity: "high",
      cvss: 7.4,
      cve: "CVE-2024-0002",
      description: "Stored XSS vulnerability in the comments section allows execution of malicious scripts.",
      affectedAssets: ["Web Application"],
      status: "in-progress",
      discoveredDate: "2024-01-14",
      category: "XSS"
    },
    {
      id: "3",
      title: "Insecure Direct Object References",
      severity: "medium",
      cvss: 6.1,
      description: "Users can access other users' data by manipulating object references in URLs.",
      affectedAssets: ["API Endpoints"],
      status: "open",
      discoveredDate: "2024-01-13",
      category: "Broken Access Control"
    },
    {
      id: "4",
      title: "Weak Password Policy",
      severity: "medium",
      cvss: 5.3,
      description: "Current password policy allows weak passwords that can be easily brute-forced.",
      affectedAssets: ["Authentication System"],
      status: "resolved",
      discoveredDate: "2024-01-12",
      category: "Authentication"
    },
    {
      id: "5",
      title: "Missing HTTPS on Login Page",
      severity: "low",
      cvss: 3.7,
      description: "Login page is accessible over HTTP, potentially exposing credentials.",
      affectedAssets: ["Web Application"],
      status: "resolved",
      discoveredDate: "2024-01-11",
      category: "Transport Security"
    }
  ]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "text-security-critical bg-security-critical/10 border-security-critical/50";
      case "high":
        return "text-security-high bg-security-high/10 border-security-high/50";
      case "medium":
        return "text-security-medium bg-security-medium/10 border-security-medium/50";
      case "low":
        return "text-security-low bg-security-low/10 border-security-low/50";
      default:
        return "text-muted-foreground bg-muted/10 border-muted/50";
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "open":
        return <AlertCircle className="h-4 w-4 text-security-critical" />;
      case "in-progress":
        return <Clock className="h-4 w-4 text-security-medium" />;
      case "resolved":
        return <CheckCircle className="h-4 w-4 text-security-low" />;
      default:
        return <Shield className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const getCvssColor = (cvss: number) => {
    if (cvss >= 9.0) return "text-security-critical";
    if (cvss >= 7.0) return "text-security-high";
    if (cvss >= 4.0) return "text-security-medium";
    return "text-security-low";
  };

  const criticalCount = vulnerabilities.filter(v => v.severity === "critical").length;
  const highCount = vulnerabilities.filter(v => v.severity === "high").length;
  const mediumCount = vulnerabilities.filter(v => v.severity === "medium").length;
  const lowCount = vulnerabilities.filter(v => v.severity === "low").length;
  const resolvedCount = vulnerabilities.filter(v => v.status === "resolved").length;
  const totalCount = vulnerabilities.length;
  const resolvedPercentage = (resolvedCount / totalCount) * 100;

  return (
    <div className="space-y-6">
      {/* Vulnerability Summary */}
      <Card className="security-elevation border-border/50">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Bug className="h-5 w-5 text-primary" />
            <span>Vulnerability Assessment Summary</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="text-center p-4 rounded-lg bg-security-critical/10 border border-security-critical/20">
              <div className="text-2xl font-bold text-security-critical">{criticalCount}</div>
              <div className="text-sm text-muted-foreground">Critical</div>
            </div>
            <div className="text-center p-4 rounded-lg bg-security-high/10 border border-security-high/20">
              <div className="text-2xl font-bold text-security-high">{highCount}</div>
              <div className="text-sm text-muted-foreground">High</div>
            </div>
            <div className="text-center p-4 rounded-lg bg-security-medium/10 border border-security-medium/20">
              <div className="text-2xl font-bold text-security-medium">{mediumCount}</div>
              <div className="text-sm text-muted-foreground">Medium</div>
            </div>
            <div className="text-center p-4 rounded-lg bg-security-low/10 border border-security-low/20">
              <div className="text-2xl font-bold text-security-low">{lowCount}</div>
              <div className="text-sm text-muted-foreground">Low</div>
            </div>
          </div>

          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span>Resolution Progress</span>
              <span>{resolvedCount}/{totalCount} ({resolvedPercentage.toFixed(1)}%)</span>
            </div>
            <Progress value={resolvedPercentage} className="h-2" />
          </div>
        </CardContent>
      </Card>

      {/* Vulnerability List */}
      <Card className="security-elevation border-border/50">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Target className="h-5 w-5 text-primary" />
            <span>Detected Vulnerabilities</span>
            <Badge variant="outline" className="ml-auto">
              {vulnerabilities.filter(v => v.status !== "resolved").length} Open
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {vulnerabilities.map((vuln) => (
              <div
                key={vuln.id}
                className={`p-4 rounded-lg border border-border/50 transition-all duration-300 hover:border-primary/50 ${
                  vuln.severity === "critical" && vuln.status === "open" ? "animate-security-pulse" : ""
                }`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <h4 className="font-semibold text-foreground">{vuln.title}</h4>
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                      {vuln.cve && (
                        <Badge variant="outline" className="text-primary border-primary/50">
                          {vuln.cve}
                        </Badge>
                      )}
                      <div className="flex items-center space-x-1">
                        <span className="text-xs text-muted-foreground">CVSS:</span>
                        <span className={`text-sm font-mono ${getCvssColor(vuln.cvss)}`}>
                          {vuln.cvss}
                        </span>
                      </div>
                    </div>
                    
                    <p className="text-sm text-muted-foreground mb-3">
                      {vuln.description}
                    </p>
                    
                    <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                      <div>
                        <span className="font-medium">Affected Assets:</span> {vuln.affectedAssets.join(", ")}
                      </div>
                      <div>
                        <span className="font-medium">Category:</span> {vuln.category}
                      </div>
                      <div>
                        <span className="font-medium">Discovered:</span> {vuln.discoveredDate}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2 ml-4">
                    <div className="flex items-center space-x-1">
                      {getStatusIcon(vuln.status)}
                      <span className="text-sm capitalize">{vuln.status.replace("-", " ")}</span>
                    </div>
                    <Button variant="outline" size="sm">
                      Details
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          <div className="mt-6 text-center">
            <Button variant="outline" className="w-full">
              Run New Vulnerability Scan
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default VulnerabilityAssessment;